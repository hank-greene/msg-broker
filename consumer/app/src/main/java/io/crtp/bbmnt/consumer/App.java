/*
 * This Java source file was generated by the Gradle 'init' task.
 * 
 * https://www.tutorialspoint.com/javamail_api/javamail_api_quick_guide.htm
 * 
 */
package io.crtp.bbmnt.consumer;

import java.time.Duration;
import java.util.Properties;
import java.util.Arrays;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import javax.mail.Authenticator;

import java.io.UnsupportedEncodingException;
import java.util.Date;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.BodyPart;
import javax.mail.Multipart;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.File;
import java.io.FileWriter;

public class App {

    private static String PROPERTIES_FILE_NAME = "mbConsumer.properties";
    private static Properties mbProps = null;

    public String getGreeting() {
        return "BBMNT Consumer";
    }

    public static void main(String[] args) {
        App app = new App();
        System.out.println(app.getGreeting());
        System.out.println("!!!! >>>>  REMOVE PW before checkin <<<<<<<<<<<<<<!!!!!!!!!!!!");

        Properties mbProps = null;

        try (InputStream input = new FileInputStream("./"+PROPERTIES_FILE_NAME)) {

            mbProps = new Properties();
            mbProps.load(input);
            displayProperties(mbProps);

            String topicName = "kafkaDev";

            //Properties props = new Properties();
            //props.put("bootstrap.servers", "localhost:9092");
            //props.put("bootstrap.servers", "10.10.89.94:9092");
            //props.put("group.id", "test");
            //props.put("enable.auto.commit", "true");
            //props.put("auto.commit.interval.ms", "1000");
            //props.put("session.timeout.ms", "30000");
            //props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
            //props.put("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
            //KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);

            String channel_topic = mbProps.getProperty("kafka.topic");
            System.out.println( "kafka.topic / channel_topic " + channel_topic );

            KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(mbProps);
            
            //Kafka Consumer subscribes list of topics here.
            consumer.subscribe(Arrays.asList(topicName));
            
            //print the topic name
            System.out.println("Subscribed to topic " + topicName);
            int i = 0;

            //TODO: REMOVE THIS TEST puuposes only !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            app.sendMobile( "test message" );

            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(60000));
                for (ConsumerRecord<String, String> record : records) {
                    // print the offset,key and value for the consumer records.
                    System.out.println("printf");
                    System.out.printf( "offset = %d, key = %s, value = %s\n", record.offset(), record.key(), record.value() );

                    if (record.key().contains("mobile")) {

                        app.sendMobile( record.value() );

                    } else if (record.key().contains("email")) {

                        app.sendMail( record.value() );

                    }
                }
            }

        } catch (IOException iox) {
            if (new File("./"+PROPERTIES_FILE_NAME).exists()){

            } else {
                createPropertiesFile();
                System.out.println("The mb.properties file needs to be filled out.");
            }
            iox.printStackTrace();
        }


    }

    /****
     * 
     */
    private static void createPropertiesFile() {
        try {
            FileWriter fw = new FileWriter("./"+PROPERTIES_FILE_NAME);
            //props.put("bootstrap.servers", "localhost:9092");
            fw.write("kafka.topic="+System.getProperty("line.separator"));
            fw.write("bootstrap.servers=< IP Address >:9092"+System.getProperty("line.separator"));
            fw.write("group.id=test"+System.getProperty("line.separator"));
            fw.write("enable.auto.commit=true"+System.getProperty("line.separator"));
            fw.write("auto.commit.interval.ms=1000"+System.getProperty("line.separator"));
            fw.write("session.timeout.ms=30000"+System.getProperty("line.separator"));
            fw.write("key.deserializer=org.apache.kafka.common.serialization.StringDeserializer"+System.getProperty("line.separator"));
            fw.write("value.deserializer=org.apache.kafka.common.serialization.StringDeserializer"+System.getProperty("line.separator"));
            fw.write("email.host="+System.getProperty("line.separator"));
            fw.write("email.sender="+System.getProperty("line.separator"));
            fw.write("email.password="+System.getProperty("line.separator"));
            fw.close();
        } catch (IOException iox){
            iox.printStackTrace();
        }
    }


    private static void displayProperties( Properties mbProps ) {
        try {
            System.out.println("kafka.topi "+ mbProps.getProperty("kafka.topic"));
            System.out.println("bootstrap.servers " + mbProps.getProperty("bootstrap.servers"));
            System.out.println("group.id " + mbProps.getProperty("group.id"));
            System.out.println("enable.auto.commit " + mbProps.getProperty("enable.auto.commit"));
            System.out.println("auto.commit.interval.ms " + mbProps.getProperty("auto.commit.interval.ms"));
            System.out.println("session.timeout.ms " + mbProps.getProperty("session.timeout.ms"));
            System.out.println("key.deserializer " + mbProps.getProperty("key.deserializer"));
            System.out.println("value.deserializer " + mbProps.getProperty("value.deserializer"));
            System.out.println();
        } catch ( Exception ex ) {
            System.out.println( ex.toString() );
            ex.printStackTrace();
        }
    }


    /**
     * 
     * @param emailAddrAndLink
     */
    public void sendMail( String emailAddrAndLink ) {
        System.out.println( "send to " + emailAddrAndLink );
    } 


    /**
     * 
     * @param mobileNumAndLink
     */
    public void sendMobile( String mobileNumAndLink ) {

        String to = "4434332699";
        String from = "justin.beeber@tgndomains.com";
        //String from = mbProps.getProperty("email.sender");
        Session session = null;

        System.out.println("mobileNumAndLink   "+mobileNumAndLink);


        String mobileNum = getMobileNum( mobileNumAndLink );
        String appLink = getLink( mobileNumAndLink );

        mobileNum = "4434332699";

        System.out.println( " txt to " + mobileNum );
        System.out.println( " applink "+ appLink );

        to = mobileNum + "@txt.att.net";            
        from = "justin.beeber@tgndomains.com";

        final String username = "justin.beeber@tgndomains.com";//change accordingly
        final String password = "88NDy7TLChkl";//change accordingly
        //final String username = mbProps.getProperty("email.sender");//change accordingly
        //final String password = mbProps.getProperty("email.password");//change accordingly

        // Assuming you are sending email through relay.jangosmtp.net
        //String host = mbProps.getProperty("email.host");
        String host = "173.166.130.90";
        System.out.println("-----------> "+host+"   to "+to);
        Properties props = new Properties();
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.starttls.enable", "true");
        props.put("mail.smtp.host", host);
        props.put("mail.smtp.port", "25");
        props.put("mail.smtp.ssl.protocols", "TLSv1.2");

        // Get the Session object.
        session = Session.getInstance(props,
            new javax.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication(username, password);
            }
        });


        try {
            // Create a default MimeMessage object.
            Message message = new MimeMessage( session );
         
            // Set From: header field of the header.
            message.setFrom(new InternetAddress(from));
         
            // Set To: header field of the header.
            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(to));
         
            // Set Subject: header field
            message.setSubject("Testing Subject");
         
            // Now set the actual message
            message.setText("Hi," +
             "Click here  "+
             "https://magneticechos.online/uid/abc123.xwic"+" to access magnetic echos, echos "+
             " from the past, heard today.");
     
            // Send message
            Transport.send( message );
     
            System.out.println("Sent message successfully....");
            System.out.println("!!!! >>>>  REMOVE PW before checkin <<<<<<<<<<<<<<!!!!!!!!!!!!");
     
        } catch (MessagingException e) {
            throw new RuntimeException(e);
        }
    }

    /***
     * 
     * @param mobileNumNLink
     * @return
     */
    private String getMobileNum(String mobileNumNLink) {
        System.out.println(mobileNumNLink);
        String result = "notset";
        try {
            String[] mblnum = mobileNumNLink.split(":");
            result = mblnum[0];
        } catch ( Exception ex ) {
            System.out.println("error message");
        }
        return result;
    }

    /****
     * 
     * @param mobileNumNLink
     * @return
     */
    private String getLink(String mobileNumNLink) {
        String result = "notset";
        try {
            String[] link = mobileNumNLink.split(":");
            result = link[1];
        } catch ( Exception ex ) {
            System.out.println("error message");
        }
        return result;
    }
}
